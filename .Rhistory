install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("manlius/muxViz")
remove.packages("muxViz")
devtools::install_github("manlius/muxViz")
library(htmltools)
library(htmltools)
install.packages("htmltools")
detach("package:htmltools", unload = TRUE)
install.packages("htmltools")
devtools::install_github("manlius/muxViz")
install.packages("htmltools")
devtools::install_github("manlius/muxViz")
library(emln)#multilayer package
#load packages
library(igraph)
library(dplyr)
library(tidyverse)
library(emln)#multilayer package
library(readr)
library(ggplot2)
library(cowplot)
library(tidyverse)
#setwd("/Users/agustinvitali/Desktop/Work/Papers/Norwood_Farm/GitHub/Norwood_farm")
setwd("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio")
#source("/Users/agustinvitali/Desktop/Work/Papers/Norwood_Farm/GitHub/Norwood_farm/Exploratory/Scenario_ES/functions.R")
source("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio/Exploratory/Scenario_ES/functions.R")
######### --- Call and arrange dataframes
Norwood_farm<-readRDS("Data/Norwood_farm.RData") #read multilayer object
#upload and prepare dataframe
output_ind_ES<- read.csv("Data/Indirect_ES_sim_CP.csv", sep =",")
output_ind_ES$management <- factor(output_ind_ES$management, levels = c("E", "SE", "M", "SI","I","IM")) #change order of factors
#upload and prepare dataframe
output_ind_ES<- read.csv("Data/Indirect_ES_sim_CP.csv", sep =",")
output_ind_ES$management <- factor(output_ind_ES$management, levels = c("E", "SE", "M", "SI","I","IM")) #change order of factors
#Observed (empirical)
output_ind_ES_emp <- read.csv("Data/Land_use_output_weighted_CP_intense.csv", sep =",")
output_ind_ES_emp$management <- factor(output_ind_ES_emp$management, levels = c("E", "SE", "M", "SI","I","IM")) #change order of factors
#Empirical
indirect_obs<-output_ind_ES_emp  %>%
group_by(management,services_to) %>%
mutate(tot = n()) %>% ungroup() %>%
group_by(services_to) %>%
mutate(prop = tot/max(tot)) %>%  #prop of indirect effects on E(D)S retained in the empirical
dplyr::select(management,services_to,tot,prop) %>%
unique() %>% rename("Prop_mean" = "prop") %>% filter(management !="E")
# shuffled
indirect_shuff<- output_ind_ES %>% filter(!(iteration == "Emp" & management =="E")) %>%
group_by(management,iteration,services_to) %>%
mutate(tot = n(),
tot_emp = case_when( #Values of denominator
services_to == "Crop production"~ 1129,
services_to == "Pollination" ~ 18733,
services_to == "Crop damage"~ 9992,
services_to == "Pest control"~ 3272,
services_to == "Seed dispersal" ~ 4224,
services_to == "Butterfly watching"~ 3515,
services_to == "Bird watching"~ 5820 )) %>% ungroup() %>%
group_by(services_to) %>%
mutate(Prop_mean = tot/tot_emp) %>%  #prop of E(D)S rtained across habitat management per iteration and habitat management
dplyr::select(management,iteration,services_to,Prop_mean) %>%
unique()
indirect_shuff<- indirect_shuff %>% filter(!(iteration == "Emp" & management =="E"))
# calculate Z-score
indir_ES_z_score <-
inner_join(indirect_obs,
indirect_shuff %>% select(-iteration) %>%
group_by(management,services_to) %>%
summarise(ind_shuff_mean=mean(Prop_mean), ind_shuff_sd=sd(Prop_mean), n=n())) %>%
drop_na() %>%
mutate(z=(Prop_mean-ind_shuff_mean)/ind_shuff_sd)
indir_ES_z_score %<>%
mutate(signif=case_when(z>1.96 ~ 'above', # Obs is more than the shuffled
z< -1.96 ~ 'below', # Obs is lower than the shuffled
z<=1.96 | z>=-1.96 ~ 'not signif'))
View(indir_ES_z_score)
averages_prop <- indir_ES_z_score %>%
mutate(times_emp = ind_shuff_mean/Prop_mean)
View(averages_prop)
View(averages_prop)
averages_prop <- indir_ES_z_score %>%
mutate( times_emp = case_when(
ind_shuff_mean > Prop_mean ~ ind_shuff_mean / Prop_mean,
ind_shuff_mean <= Prop_mean ~ Prop_mean / ind_shuff_mean,
))
View(averages_prop)
#Summary averages (across management scenario)
averages_prop <- indir_ES_z_score %>%
mutate( times_emp = case_when(
ind_shuff_mean > Prop_mean ~ ind_shuff_mean / Prop_mean,
ind_shuff_mean <= Prop_mean ~ Prop_mean / ind_shuff_mean,
)) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
ungroup() %>% group_by(services) %>%
summarise(average_prop_emp = mean(Prop_mean),
sd_prop_emp = sd(Prop_mean), n=n(),
average_prop_shuff = mean(ind_shuff_mean),#average of prop in simulated across management scenario
sd_prop_shuff = mean(ind_shuff_sd),#sd of prop in simulated across management scenario
ave_times_emp = mean(times_emp) #average times lower in the empirical compared null across management scenario
)
#Summary averages (across management scenario)
averages_prop <- indir_ES_z_score %>%
mutate( times_emp = case_when(
ind_shuff_mean > Prop_mean ~ ind_shuff_mean / Prop_mean,
ind_shuff_mean <= Prop_mean ~ Prop_mean / ind_shuff_mean,
)) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
ungroup() %>% group_by(services_to) %>%
summarise(average_prop_emp = mean(Prop_mean),
sd_prop_emp = sd(Prop_mean), n=n(),
average_prop_shuff = mean(ind_shuff_mean),#average of prop in simulated across management scenario
sd_prop_shuff = mean(ind_shuff_sd),#sd of prop in simulated across management scenario
ave_times_emp = mean(times_emp) #average times lower in the empirical compared null across management scenario
)
View(averages_prop)
