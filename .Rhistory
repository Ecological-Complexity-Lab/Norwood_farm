#load packages
library(igraph)
library(dplyr)
library(tidyverse)
library(emln)
## -- Load libraries --------------------------------------------------------------------------------------------------------
library(igraph)
library(dplyr)
library(tidyverse)
library(emln)
## -- get_data--------------------------------------------------------------------------------------------------------
setwd("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio") #set directory
# List of nodes with attributes
Norwood_farm<-readRDS("Data/Norwood_farm.RData") #read multilayer object
nodes<- Norwood_farm$nodes %>% #list of nodes with attributes
gather(services,value,4:10) %>% select(-ES,-DES)  %>%
filter(value>0)
## Upload edge list of each management scenario
edge_list<- read.csv("Data/Land_use_edgelist.csv", sep = ",")
View(edge_list)
## Create an igraph object for each management using the edge list
network.ES<-list()
for (i in unique(edge_list$management)){# for each treatment
#Filter data
edge_list_management<-edge_list %>% filter(management== i) #filter edge list according to the management
#Create igraph object
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL)
# Storage the results
list_name <- paste0(i, i)
network.ES[[i]] <- net.ES
}
## Estimate shortest path between species in each network
short_man<-NULL
management<-c()
for (m in names(network.ES)) { #for each management
# Filter data
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
# Convert adjacency matrix to edge list
short_1<-matrix_to_list_unipartite(dis, directed =FALSE)
short <- as.data.frame(short_1$edge_list)%>%
rename("node_from"="from","node_to" = "to", "short_path"= "weight") %>%
filter (short_path!=Inf) #eliminate isolated nodes
#Store
short_man<- rbind(short_man, short) #
management <- c(management, rep (m, nrow(short))) # services
}
species_shortpath_raw<- cbind(short_man,management)
species_shortpath_raw$node_to<-as.integer(species_shortpath_raw$node_to)
species_shortpath_raw$node_from<-as.integer(species_shortpath_raw$node_from)
## Create the inverted link version
species_shortpath_raw_inverted<- tibble(values = species_shortpath_raw$node_to,species_shortpath_raw$node_from,
species_shortpath_raw$short_path,species_shortpath_raw$management)
colnames(species_shortpath_raw_inverted) <- c("node_from", "node_to","short_path", "management")
## Combine both dataframe
species_shortpath_raw_fin<- bind_rows(species_shortpath_raw, species_shortpath_raw_inverted)
## Add services_to to the data frame
short_serv<- species_shortpath_raw_fin %>% left_join(nodes, by = c("node_to" = "node_id"), relationship = "many-to-many") %>%
select(-node_name,-taxon,-value) %>%
filter(!(is.na(services)))  #remove when node_from don't provide any dirct ES
## Calculate the average of shortest path according to each ecosystem services
species_shortpath<- short_serv %>% group_by(management,node_from,services) %>%
summarise(short_ave = mean(short_path)) %>% rename ("node_id" = "node_from")
## Add more attributes of node_from to the dataset (node_name,taxon)
species_shortpath_fin<- species_shortpath %>%
left_join(Norwood_farm$nodes, by = "node_id", relationship = "many-to-many") %>%  #add name of species and taxon of species
select(management,node_id,node_name,taxon,services,short_ave)
View(species_shortpath_fin)
write.csv(species_shortpath_fin, "Data/Land_use_shortpath.csv")
### upload dataframe
short_path_CP<-read.csv("Data/Land_use_shortpath.csv", row.names = 1) %>% mutate(land_use = "CP")
View(short_path_CP)
### upload dataframe
short_path_land_change<-read.csv("Data/Land_use_shortpath.csv", row.names = 1)
## Calculate average short path of each species to all ES in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(-services, - short_ave) %>% unique()
## Calculate average short path of each species to all ES in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(-services, - short_ave) %>% unique()
View(short_path_land_change_ave)
# Model
library(glmmTMB)
library(emmeans)
library(car)
short_CP<- glmmTMB(short_path_ave~management + taxon,
family = Gamma(link = "log"), data = short_path_land_change_ave) #we already check and this is the best model
Anova(short_CP)
Anova(short)
model_summary<-summary(short)
## Model
library(glmmTMB)
library(emmeans)
library(car)
short<- glmmTMB(short_path_ave~management + taxon,
family = Gamma(link = "log"), data = short_path_land_change_ave) # model that best fit
Anova(short)
model_summary<-summary(short)
# Extract the coefficients (for GLMM it's the average including all the levels)
coefficients <- model_summary$coefficients$cond
# Extract coefficients for each factor
management_coefs <- coefficients[grep("management", rownames(coefficients)), "Estimate"]
taxon_coefs <- coefficients[grep("taxon", rownames(coefficients)), "Estimate"]
# Calculate summary statistics for each factor
management_summary <- mean(management_coefs)
taxon_summary <- mean(taxon_coefs)
#Homogeneity
EM<-resid(short, type= "response")
FM<-fitted(short)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3)
#independence
E1_lme<-resid(short, type= "response")
boxplot(E1_lme~short_path_land_change_ave$management, main="Management")
# posthoc
post_amount<- emmeans(short, ~ management)#management
pairs(post_amount)
## Identify the 5 most important species per trophic group in the extensive scenario
top_5_taxon_extensive<-short_path_land_change %>%
filter(management == "E") %>% group_by(management, taxon) %>%
arrange(short_path_ave) %>% # Arrange by short_path_ave within each group
slice_head(n = 5) # Take the first 5 rows within each group
## Identify the 5 most important species per trophic group in the extensive scenario
top_5_taxon_extensive<-short_path_land_change_ave %>%
filter(management == "E") %>% group_by(management, taxon) %>%
arrange(short_path_ave) %>% # Arrange by short_path_ave within each group
slice_head(n = 5) # Take the first 5 rows within each group
View(top_5_taxon_extensive)
#Filter the importance of the top 5 species (from the extensive) across management scenarios
top_5_average<- short_path_land_change %>%  filter(node_id%in%top_5_taxon_extensive$node_id)
#check which ES was more affected
top_5_ave_ES<- top_5_average %>% ungroup() %>% select(management,services,short_ave) %>% group_by(management,services) %>%
summarize(ave_ES= mean(short_ave))
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average) #we already check and this is the best model
View(top_5_average)
View(top_5_ave_ES)
## Identify the 5 most important species per trophic group in the extensive scenario
top_5_taxon_extensive<-short_path_land_change_ave %>%
filter(management == "E") %>% group_by(management, taxon) %>%
arrange(short_path_ave) %>% # Arrange by short_path_ave within each group
slice_head(n = 5) # Take the first 5 rows within each group
View(top_5_taxon_extensive)
View(top_5_taxon_extensive)
## Filter the importance of the top 5 species (from the extensive) across management scenarios
top_5_average<- short_path_land_change %>%  filter(node_id%in%top_5_taxon_extensive$node_id) %>%
mutate(short_path_ave = mean(short_ave))
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average) #we already check and this is the best model
## Filter the importance of the top 5 species (from the extensive) across management scenarios
top_5_average<- short_path_land_change %>%filter(node_id%in%top_5_taxon_extensive$node_id) %>%
group_by(management, node_id) %>%
summarise (short_path_ave = mean(short_ave))
View(top_5_average)
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average) #we already check and this is the best model
View(top_5_average)
## Filter the importance of the top 5 species (from the extensive) across management scenarios
top_5_average<- short_path_land_change %>%filter(node_id%in%top_5_taxon_extensive$node_id) %>%
group_by(management, node_id, taxon) %>%
summarise (short_path_ave = mean(short_ave), .groups = 'drop')
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average) #we already check and this is the best model
AIC(top_5,top_5_2)
top_5_2<- glmmTMB(short_path_ave~management+ taxon + node_id,
family = Gamma(link = "log"), data = top_5_average)
Anova(top_5_2)
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average,
control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS"))) #we already check and this is the best model
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average,
control=glmmTMBControl(optimizer=optim, optArgs=list(method="Nelder-Mead"))) #we already check and this is the best model
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average,
control=glmmTMBControl(optimizer=optim, optArgs=list(method="L-BFGS-B"))) #we already check and this is the best model
top_5_2<- glmmTMB(short_path_ave~management+ taxon,
family = Gamma(link = "log"), data = top_5_average)
top_5_3<- glmmTMB(short_path_ave~management+ taxon,
family = Gamma(link = "log"), data = top_5_average)
AIC(top_5_2,top_5_3)
top_5_2<- glmmTMB(short_path_ave~management+ taxon + node_id,
family = Gamma(link = "log"), data = top_5_average)
top_5_3<- glmmTMB(short_path_ave~management+ taxon,
family = Gamma(link = "log"), data = top_5_average)
AIC(top_5_2,top_5_3)
Anova(top_5_3)
View(top_5_taxon_extensive)
## Identify the 5 most important species per trophic group in the extensive scenario
top_5_taxon_extensive<-short_path_land_change_ave %>%
filter(management == "E") %>% group_by(management, taxon) %>%
arrange(short_path_ave) %>% # Arrange by short_path_ave within each group
slice_head(n = 5) # Take the first 5 rows within each group
View(top_5_taxon_extensive)
View(short_path_land_change_ave)
## Filter the importance of the top 5 species (from the extensive) across management scenarios
top_5_average<- short_path_land_change_ave %>%filter(node_id%in%top_5_taxon_extensive$node_id)
View(top_5_average)
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average,
control=glmmTMBControl(optimizer=optim, optArgs=list(method="L-BFGS-B"))) #we already check and this is the best model
## Model
top_5<- glmmTMB(short_path_ave~management+ taxon+(1|node_id),
family = Gamma(link = "log"), data = top_5_average) #we already check and this is the best model
## upload and arrange dataframe
short_path_land_change<-read.csv("Data/Land_use_shortpath.csv", row.names = 1)
short_path_land_change_ave<- short_path_land_change %>% group_by(management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(-services, - short_ave) %>% unique() %>%  #calculate average short path of each species to all ES in each habitat management
mutate(taxon = str_replace(taxon, "Flower-visiting", "Flower visitor"))
ave_management_taxon<-short_path_land_change_ave %>% group_by(management,taxon) %>%
summarise(ave_short = mean(short_path_ave),
sd_short = sd(short_path_ave))
ave_management_taxon$management <- factor(ave_management_taxon$management, levels = c("E", "SE", "M", "SI","I","IM")) #change order of factors
ave_management_taxon$taxon<-as.factor(ave_management_taxon$taxon)
#Plot
color_trophic <-tibble(taxon = c("Plant","Crop","Flower visitor","Aphid","Primary aphid parasitoid","Secondary aphid parasitoid",
"Leaf-miner parasitoid","Seed-feeding insect","Seed-feeding bird",
"Seed-feeding rodent","Butterfly","Insect seed-feeder parasitoid","Rodent ectoparasite"),
color = c("#33a02c","#b15928","#a6cee3","#1f78b4","#b2df8a","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6",
"#6a3d9a", "#cccc7a", "#e7298a"))
pdf("Graphs/Figure_5_panel_A.pdf", width = 4.5, height = 5)
Panel_A<- ggplot(ave_management_taxon, aes(x = management, y = ave_short, group =taxon, color= taxon)) +
scale_color_manual(values = color_trophic$color[match(levels(ave_management_taxon$taxon), color_trophic$taxon)])+
geom_point() +
geom_line(size = 1.4)  +
geom_errorbar(aes(ymin = ave_short - sd_short, ymax = ave_short + sd_short), width = 0.2) +
labs(x = "Land conversion",
y = "Shortest path ",
color = "Trophic guild") +
theme(panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black",fill = NA,size = 1),
panel.spacing = unit(0.5, "cm", data = NULL),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),
axis.text = element_text(size=12, color='black'),
axis.title = element_text(size=15, color='black'),
axis.line = element_blank(),
legend.title =  element_text(size = 11, color = "black"),
legend.text = element_text(size = 9),
legend.position = "bottom",
legend.box = "vertical",
legend.box.margin = margin(t = 5, r = 1, b = 5, l = 5),  # Add margin around the legend box
legend.margin = margin(t = 5, r = 1, b = 5, l = 5),
legend.key.height = unit(0.6, "cm"),  # Reduce the height of the legend keys
legend.key.width = unit(0.6, "cm")) +
guides(color = guide_legend(title.position = "top", title.hjust = 0.5, nrow = 3))
Panel_A
#Plot
color_trophic <-tibble(taxon = c("Plant","Crop","Flower visitor","Aphid","Primary aphid parasitoid","Secondary aphid parasitoid",
"Leaf-miner parasitoid","Seed-feeding insect","Seed-feeding bird",
"Seed-feeding rodent","Butterfly","Insect seed-feeder parasitoid","Rodent ectoparasite"),
color = c("#33a02c","#b15928","#a6cee3","#1f78b4","#b2df8a","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6",
"#6a3d9a", "#cccc7a", "#e7298a"))
Panel_A<- ggplot(ave_management_taxon, aes(x = management, y = ave_short, group =taxon, color= taxon)) +
scale_color_manual(values = color_trophic$color[match(levels(ave_management_taxon$taxon), color_trophic$taxon)])+
geom_point() +
geom_line(size = 1.4)  +
geom_errorbar(aes(ymin = ave_short - sd_short, ymax = ave_short + sd_short), width = 0.2) +
labs(x = "Land conversion",
y = "Shortest path ",
color = "Trophic guild") +
theme(panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black",fill = NA,size = 1),
panel.spacing = unit(0.5, "cm", data = NULL),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),
axis.text = element_text(size=12, color='black'),
axis.title = element_text(size=15, color='black'),
axis.line = element_blank(),
legend.title =  element_text(size = 11, color = "black"),
legend.text = element_text(size = 9),
legend.position = "bottom",
legend.box = "vertical",
legend.box.margin = margin(t = 5, r = 1, b = 5, l = 5),  # Add margin around the legend box
legend.margin = margin(t = 5, r = 1, b = 5, l = 5),
legend.key.height = unit(0.6, "cm"),  # Reduce the height of the legend keys
legend.key.width = unit(0.6, "cm")) +
guides(color = guide_legend(title.position = "top", title.hjust = 0.5, nrow = 3))
Panel_A
# Check the 5 most important species per trophic group in Extensive
top_5_taxon_extensive<-short_path_land_change_ave %>%
filter(management == "E") %>% group_by(management, taxon) %>%
arrange(short_path_ave) %>% # Arrange by short_path_ave within each group
slice_head(n = 5) # Take the first 5 rows within each group
#Filter the importance of the top 5 species (from the extensive) across management scenarios
top_5_average<- short_path_land_change_ave %>%  filter(node_id%in%top_5_taxon_extensive$node_id)
# set up parameters and structure
# Define color of each layer and sps
top_5_average$management <- factor(top_5_average$management, levels = c("E", "SE", "M", "SI","I","IM")) #change order of factors
top_5_ave <- top_5_average %>% ungroup() %>%
select(node_id,taxon,management,short_path_ave) %>%
spread(management,short_path_ave) %>%  #rearrange dataframe
ungroup()
top_5_ave<-top_5_ave[,c(1,2,3,7,6,8,4,5)]
color = colorRamp2(seq(max(top_5_ave[,3:8], na.rm = TRUE), min(top_5_ave[,3:8], na.rm = TRUE),
length =5),viridis(5))#color layer
sp_names <- top_5_ave$node_id #create temporal species name to filter the big database
library(igraph)
library(tidyverse)
library(ggtext)
library(cowplot)
library(circlize)
library(viridis)
library(ComplexHeatmap)
install.packages("ComplexHeatmap")
library(ComplexHeatmap)
