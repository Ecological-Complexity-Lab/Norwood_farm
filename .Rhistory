### Test if land use change modify the indirect importance of species on E(D)S:
#To do this, we use a permanova.
library(vegan)
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
summarise(short_path_ave = mean(short_ave))
View(short_path_land_change_ave)
short_path_perm<-short_path_land_change_ave %>%
spread(node_id,short_path_ave)
View(short_path_perm)
short_path_perm$management<-factor(short_path_perm$management, levels = c("E","SE","M","SI","I"))
# Prepare the matrix to run the analysis (species in columns and management in rows)
short_path_perm<-short_path_land_change_ave %>%
spread(node_id,short_path_ave)  %>%
mutate(across(everything(), ~ replace(., is.na(.), 0))) # Na to 0 because the species dissapear (the path is 0)
short_path_perm$management<-factor(short_path_perm$management, levels = c("E","SE","M","SI","I"))
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(management == "CP")
View(short_path_perm_CP)
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(land_use== "CP")
management<-unique(short_path_perm_CP$management)
# Prepare the matrix to run the analysis (species in columns and management in rows)
short_path_perm<-short_path_land_change_ave %>%
spread(node_id,short_path_ave)  %>%
mutate(across(everything(), ~ replace(., is.na(.), 0))) # Na to 0 because the species dissapear (the path is 0)
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(land_use== "CP")
management<-unique(short_path_perm_CP$management)
CP_short_dist<-vegdist(short_path_perm_CP[,3:ncol(short_path_perm_CP)])
short_path_perm_CP[,3:ncol(short_path_perm_CP)]
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(land_use== "CP")
management<-unique(short_path_perm_CP$management) #vector withtype of managements
CP_short_dist<-vegdist(short_path_perm_CP[,3:ncol(short_path_perm_CP)])
CP_short_dist<-vegdist(short_path_perm_CP[,3:ncol(short_path_perm_CP)], method = "bray")
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(land_use== "CP") %>% select(-land_use)
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(land_use== "CP") %>% ungroup() %>% select(-land_use)
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(land_use== "CP") %>% ungroup() %>% select(-land_use)
management<-unique(short_path_perm_CP$management) #vector withtype of managements
CP_short_dist<-vegdist(short_path_perm_CP[,2:ncol(short_path_perm_CP)], method = "bray")
prueba<-adonis2(CP_short_dist~ management)
prueba<-adonis2(CP_short_dist~ management, permutations=9999)
management<-unique(short_path_perm_CP$management) #vector withtype of managements
CP_short_dist<-vegdist(short_path_perm_CP[,2:ncol(short_path_perm_CP)], method = "bray")
prueba<-adonis2(CP_short_dist~ management, permutations=999)
prueba<-adonis2(CP_short_dist~ management)
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(land_use== "CP") %>% ungroup() %>% select(-land_use)
management<-unique(short_path_perm_CP$management) #vector withtype of managements
CP_short_dist<-vegdist(short_path_perm_CP[,2:ncol(short_path_perm_CP)], method = "bray")
CP_short_dist
prueba<-adonis2(short_path_perm_CP[,2:ncol(short_path_perm_CP)]~ management)
short_path_perm_CP[,2:ncol(short_path_perm_CP)]
CP_short_dist<-vegdist(short_path_perm_CP[,2:ncol(short_path_perm_CP)], method = "bray")
prueba<-adonis2(CP_short_dist~ management)
prueba<-adonis(CP_short_dist~ management)
View(prueba)
prueba
dispersion<-betadisper(CP_short_dist, group=management)
dispersion
prueba<-adonis2(CP_short_dist~ management)
prueba
View(short_path_CP)
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
summarise(short_path_ave = mean(short_ave))
View(short_path_land_change_ave)
# From Extensive to intensive CP
short_path_perm_CP<- short_path_perm %>% filter(land_use== "CP") %>% ungroup() %>% select(-land_use)
# Model
library(lme4)
View(short_path_perm_CP)
## From Extensive to intensive CP
short_path_perm_CP<- short_path_land_change_ave %>% filter(land_use== "CP")
## From Extensive to intensive CP
short_path_land_change_CP<- short_path_land_change_ave %>% filter(land_use== "CP")
View(short_path_land_change_CP)
View(short_path_CP)
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
mutate(short_path_ave = mean(short_ave))
View(short_path_land_change_ave)
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(services) %>% unique()
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(-services) %>% unique()
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(-services) %>% unique()
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(-services, - short_ave) %>% unique()
## From Extensive to intensive CP
short_path_land_change_CP<- short_path_land_change_ave %>% filter(land_use== "CP")
?glmer
# Model
library(glmmTMB)
prueba<- gmmTMB(short_path_ave~management*taxon + (1|node_id), family = Gamma(link = "log"), data = short_path_land_change_CP)
# Model
library(glmmTMB)
prueba<- glmmTMB(short_path_ave~management*taxon + (1|node_id), family = Gamma(link = "log"), data = short_path_land_change_CP)
prueba
summary(prueba)
prueba<- glmmTMB(short_path_ave~management+ (1|node_id), family = Gamma(link = "log"), data = short_path_land_change_CP)
summary(prueba)
prueba<- glmmTMB(short_path_ave~management +taxon+ (1|node_id), family = Gamma(link = "log"), data = short_path_land_change_CP)
summary(prueba)
prueba<- glmmTMB(short_path_ave~management:taxon+ (1|node_id), family = Gamma(link = "log"), data = short_path_land_change_CP)
summary(prueba)
# Model
library(glmmTMB)
prueba<- glmmTMB(short_path_ave~management+taxon+ (1|node_id), family = Gamma(link = "log"), data = short_path_land_change_CP)
anove(prueba)
anova(prueba)
Anova(prueba)
Aov(prueba)
Aov(prueba)
summary(prueba)
prueba1<- glmmTMB(short_path_ave~management+taxon+ (1|node_id), family = Gamma(link = "log"), data = short_path_land_change_CP)
prueba2<- glmmTMB(short_path_ave~management+ (1|node_id), family = Gamma(link = "log"), data = short_path_land_change_CP)
AIC(prueba1,prueba2)
## From Extensive to intensive PP
short_path_land_change_PP<- short_path_land_change_ave %>% filter(land_use== "PP")
# Model
library(glmmTMB)
short_PP<- glmmTMB(short_path_ave~management+taxon+ (1|node_id),
family = Gamma(link = "log"), data = short_path_land_change_PP) #we already check and this is the best model
View(short_path_land_change_PP)
short_PP<- glmmTMB(short_path_ave~taxon+ (1|node_id),
family = Gamma(link = "log"), data = short_path_land_change_PP) #we already check and this is the best model
short_PP<- glmmTMB(short_path_ave~management+ (1|node_id),
family = Gamma(link = "log"), data = short_path_land_change_PP) #we already check and this is the best model
short_PP<- glmmTMB(short_path_ave~taxon+ (1|node_id),
family = Gamma(link = "log"), data = short_path_land_change_PP) #we already check and this is the best model
short_PP<- glmmTMB(short_path_ave~management+ (1|node_id),
family = Gamma(link = "log"), data = short_path_land_change_PP) #we already check and this is the best model
summary(short_PP)
short_PP<- glmmTMB(short_path_ave~management+taxon+ (1|node_id),
family = Gamma(link = "log"), data = short_path_land_change_PP) #we already check and this is the best model
summary(short_PP)
# Model
library(glmmTMB)
short_PP<- glmmTMB(short_path_ave~management+taxon+ (1|node_id),
family = Gamma(link = "log"), data = short_path_land_change_PP) #we already check and this is the best model
summary(short_PP)
exploratory<-short_path_land_change %>% group_by(land_use,management,taxon) %>%
summarise(mean_short = mean(short_ave))
View(exploratory)
exploratory<-short_path_land_change %>% group_by(land_use,taxon) %>%
summarise(mean_short = mean(short_ave))
View(exploratory)
exploratory_management<-short_path_land_change %>% group_by(land_use,management) %>%
summarise(mean_short = mean(short_ave))
View(exploratory_management)
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(-services, - short_ave) %>% unique()
## From Extensive to intensive CP
short_path_land_change_CP<- short_path_land_change_ave %>% filter(land_use== "CP")
# Model
library(glmmTMB)
short_CP<- glmmTMB(short_path_ave~management+taxon+ (1|node_id),
family = Gamma(link = "log"), data = short_path_land_change_CP) #we already check and this is the best model
summary(short_CP)
exploratory_management<-short_path_land_change %>% group_by(land_use,management) %>%
exploratory_management<-short_path_land_change %>% group_by(land_use,management) %>%
summarise(mean_short = mean(short_ave),
se_short = sd(short_ave / sqrt(n())))
exploratory_management<-short_path_land_change %>% group_by(land_use,management) %>%
summarise(mean_short = mean(short_ave),
se_short = sd(short_ave)/ sqrt(n()))
View(exploratory_management)
exploratory_taxon<-short_path_land_change %>% group_by(land_use,taxon) %>%
summarise(mean_short = mean(short_ave),
se_short = sd(short_ave)/ sqrt(n()))
View(exploratory_taxon)
View(short_path_CP)
View(short_path_land_change_CP)
View(short_path_land_change_CP)
#select the top 25 species in each treatment
prueba<-short_path_land_change_CP %>% group_by(management) %>%
arrange(short_path_ave) %>%
ungroup()
View(prueba)
#select the top 25 species in each treatment
prueba<-short_path_land_change_CP %>% group_by(management) %>%
slice_min(order_by = abundance, n = 25) %>% #select the 25 species with the shortest path in each treatment
ungroup()
#select the top 25 species in each treatment
prueba<-short_path_land_change_CP %>% group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25) %>% #select the 25 species with the shortest path in each treatment
ungroup()
View(prueba)
check<-prueba %>% ungroup() %>% select(node_id) %>% unique()
View(check)
# Step 1: Get Top 25 species in 'extensive' management
top_25_extensive <- your_data_frame %>%
filter(management == "extensive") %>%
top_n(25, abundance) %>%
select(species) # Adjust if your species column has a different name
# Step 1: Get Top 25 species in 'extensive' management
top_25_extensive <- short_path_land_change_CP %>%
filter(management == "E") %>%
slice_min(order_by = short_path_ave, n = 25)
View(top_25_extensive)
top_25_extensive <- short_path_land_change_CP %>%
filter(management == "E") %>%
slice_min(order_by = short_path_ave, n = 25)
View(top_25_extensive)
slice_min(order_by = short_path_ave, n = 25)
top_25_extensive <- short_path_land_change_CP %>%
filter(management == "E") %>%
slice_min(order_by = short_path_ave, n = 25)
?slice_min
# Step 1: Get Top 25 species in 'extensive' management
top_25_extensive <- short_path_land_change_CP %>%
filter(management == "E") %>%
slice_min(order_by = short_path_ave, n = 25)
# Step 1: Get Top 25 species in 'extensive' management
top_25_extensive <- short_path_land_change_CP %>%
filter(management == "E") %>% group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
View(top_25_extensive)
# Step 2: Get Top 25 species in other managements
top_25_other_managements <- short_path_land_change_CP %>%
filter(management != "E") %>%
group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
View(top_25_other_managements)
# Step 3: Check for presence/absence
presence_absence <- top_25_extensive %>%
cross_join(unique(top_25_other_managements$management)) %>%
rowwise() %>%
mutate(presence = (species %in% top_25_other_managements$species[top_25_other_managements$management == management])) %>%
ungroup()
# Step 3: Check for presence/absence
presence_absence <- top_25_extensive %>%
cross_join(unique(top_25_other_managements$management)) %>%
rowwise() %>%
mutate(presence = (node_id %in% top_25_other_managements$node_id[top_25_other_managements$management == management])) %>%
ungroup()
View(top_25_extensive)
# Step 3: Check for presence/absence
presence_absence <- top_25_extensive %>%
cross_join(unique(top_25_other_managements$management)) %>%
rowwise() %>%
mutate(presence = (top_25_extensive$node_id %in% top_25_other_managements$node_id[top_25_other_managements$management == management])) %>%
ungroup()
unique_managements_df <- data.frame(management = unique(top_25_other_managements$management))
unique_managements <- data.frame(management = unique(top_25_other_managements$management))
# Step 3: Check for presence/absence
presence_absence <- top_25_extensive %>%
cross_join(unique_managements) %>%
rowwise() %>%
mutate(presence = (top_25_extensive$node_id %in% top_25_other_managements$node_id[top_25_other_managements$management == management])) %>%
ungroup()
top_25_other_managements$node_id
presence_absence <- top_25_extensive %>%
cross_join(unique_managements) %>%
rowwise() %>%
mutate(presence = (node_id %in% top_25_other_managements$node_id[top_25_other_managements$management == management])) %>%
ungroup()
View(presence_absence)
presence_absence <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., species = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "species")) %>%
mutate(presence = !is.na(species)) %>%
select(management, species = species.x, presence)
presence_absence <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., species = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id")) %>%
mutate(presence = !is.na(species)) %>%
select(management, species = species.x, presence)
unique(top_25_other_managements$management)
species = top_25_extensive$node_id
species
presence_absence <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = !is.na(species)) %>%
select(management, species = species.x, presence)
presence_absence <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = !is.na(node_id))
View(presence_absence)
presence_absence <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = !is.na(node_id)) %>%
select(management, node_id = node_id.x, presence)
# Step 1: Get Top 25 species in 'extensive' management
top_25_extensive <- short_path_land_change_CP %>%
filter(management == "E") %>% group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
# Step 2: Get Top 25 species in other managements
top_25_other_managements <- short_path_land_change_CP %>%
filter(management != "E") %>%
group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
unique_managements <- data.frame(management = unique(top_25_other_managements$management))
# Step 3: Check for presence/absence
presence_absence <- top_25_extensive %>%
cross_join(unique_managements) %>%
rowwise() %>%
mutate(presence = (node_id %in% top_25_other_managements$node_id[top_25_other_managements$management == management])) %>%
ungroup()
# Step 3: Check for presence/absence
presence_absence <- top_25_extensive %>%
cross_join(unique_managements) %>%
rowwise() %>%
mutate(presence = (node_id %in% top_25_other_managements$node_id[top_25_other_managements$management == management])) %>%
ungroup()
presence_absence_2 <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = !is.na(node_id)) %>%
select(management, node_id = node_id.x, presence)
presence_absence_2 <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = !is.na(node_id))
View(presence_absence_2)
check<-top_25_other_managements %>% filter(node_id == 78)
View(check)
check<-top_25_other_managements %>% filter(node_id == 457)
View(check)
presence_absence_2 <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" ))
presence_absence_2 <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id)
presence_absence_2 <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" ))
presence_absence_2 <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = ifelse(is.na(species), 0, 1)) %>%
select(management, node_id = node_id.x, presence)
presence_absence_2 <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = ifelse(is.na(species), 0, 1)) %>%
select(management, node_id = node_id, presence)
presence_absence_2 <- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = ifelse(is.na(short_path_ave), 0, 1)) %>%
select(management, node_id = node_id, presence)
# Step 3: Check for presence/absence
change_top_25_CP<- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = ifelse(is.na(short_path_ave), 0, 1)) %>%
select(management, node_id = node_id, presence)
View(change_top_25_CP)
# Model
library(lme4)
library("stats4")
library("bbmle")
pers_1<-glmer (presence ~ management + ( 1| nodes_id), family = binomial(link="logit"), data = change_top_25_CP)
pers_1<-glmer (presence ~ management + ( 1| node_id), family = binomial(link="logit"), data = change_top_25_CP)
summary(pers_1)
#Homogeneity
EM<-resid(pers_1, type= "deviance")
FM<-fitted(pers_1)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3)
#independence
E1_lme<-resid(pers_1, type= "deviance")
boxplot(E1_lme~change_top_25_CP$management, main="Tratamiento")
# Step 2: Get Top 25 species in other managements
top_25_other_managements <- short_path_land_change_PP %>%
filter(management != "E") %>%
group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
# Step 3: Check for persistence
change_top_25_PP<- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = ifelse(is.na(short_path_ave), 0, 1)) %>% #assign 1 when the species is still in the top 25
select(management, node_id = node_id, presence)
View(change_top_25_PP)
# Model
library(lme4)
library("stats4")
library("bbmle")
# Model
library(lme4)
library("stats4")
library("bbmle")
pers_1<-glmer (presence ~ management + ( 1| node_id), family = binomial(link="logit"), data = change_top_25_PP)
summary(pers_1)
# Step 2: Get Top 25 species in other managements
top_25_other_managements <- short_path_land_change_PP %>%
filter(management != "E") %>%
group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
# Step 3: Check for persistence
change_top_25_PP<- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = ifelse(is.na(short_path_ave), 0, 1)) %>% #assign 1 when the species is still in the top 25
select(management, node_id = node_id, presence)
View(change_top_25_PP)
pers_1<-glmer (presence ~ management + ( 1| node_id), family = binomial(link="logit"), data = change_top_25_PP)
short_path_PP<-read.csv("Data/Land_use_shortpath_weighted_PP_intense.csv", row.names = 1)%>% mutate(land_use = "PP")
## From Extensive to intensive PP
short_path_land_change_PP<- short_path_land_change_ave %>% filter(land_use== "PP")
# Step 1: Get Top 25 species in 'extensive' management
top_25_extensive <- short_path_land_change_CP %>%
filter(management == "E") %>% group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
# Step 2: Get Top 25 species in other managements
top_25_other_managements <- short_path_land_change_PP %>%
filter(management != "E") %>%
group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
View(top_25_other_managements)
# Step 3: Check for persistence
change_top_25_PP<- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = ifelse(is.na(short_path_ave), 0, 1)) %>% #assign 1 when the species is still in the top 25
select(management, node_id = node_id, presence)
View(change_top_25_PP)
# Model
library(lme4)
library("stats4")
library("bbmle")
pers_1<-glmer (presence ~ management + ( 1| node_id), family = binomial(link="logit"), data = change_top_25_PP)
pers_1<-glmer (presence ~ management , family = binomial(link="logit"), data = change_top_25_PP)
pers_2<-glmer (presence ~ management + ( 1| node_id), family = binomial(link="logit"), data = change_top_25_PP)
summary(pers_2)
#Homogeneity
EM<-resid(pers_2, type= "deviance")
FM<-fitted(pers_2)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3)
#independence
E1_lme<-resid(pers_2, type= "deviance")
boxplot(E1_lme~change_top_25_PP$management, main="Tratamiento")
?glmer
#load packages
library(igraph)
library(dplyr)
library(tidyverse)
library(emln)
setwd("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio") #set directory
short_path_PP<-read.csv("Data/Land_use_shortpath_weighted_PP_intense.csv", row.names = 1)%>% mutate(land_use = "PP")
#upload and arrange dataframe
short_path_CP<-read.csv("Data/Land_use_shortpath_weighted_CP_intense.csv", row.names = 1) %>% mutate(land_use = "CP")
short_path_PP<-read.csv("Data/Land_use_shortpath_weighted_PP_intense.csv", row.names = 1)%>% mutate(land_use = "PP")
short_path_land_change<-rbind(short_path_CP,short_path_PP)
# Step 1: Get Top 25 species in 'extensive' management
top_25_extensive <- short_path_land_change_PP %>%
filter(management == "E") %>% group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
## From Extensive to intensive PP
short_path_land_change_PP<- short_path_land_change_ave %>% filter(land_use== "PP")
#calculate average short path of each species to all E(D)S in each habitat management
short_path_land_change_ave<- short_path_land_change %>% group_by(land_use, management,node_id) %>%
mutate(short_path_ave = mean(short_ave)) %>% select(-services, - short_ave) %>% unique()
## From Extensive to intensive PP
short_path_land_change_PP<- short_path_land_change_ave %>% filter(land_use== "PP")
View(short_path_PP)
# Model
library(lme4)
library("stats4")
library("bbmle")
# Step 1: Get Top 25 species in 'extensive' management
top_25_extensive <- short_path_land_change_PP %>%
filter(management == "E") %>% group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
# Step 2: Get Top 25 species in other managements
top_25_other_managements <- short_path_land_change_PP %>%
filter(management != "E") %>%
group_by(management) %>%
slice_min(order_by = short_path_ave, n = 25)
# Step 3: Check for persistence
change_top_25_PP<- unique(top_25_other_managements$management) %>%
expand.grid(management = ., node_id = top_25_extensive$node_id) %>%
left_join(top_25_other_managements, by = c("management", "node_id" )) %>%
mutate(presence = ifelse(is.na(short_path_ave), 0, 1)) %>% #assign 1 when the species is still in the top 25
select(management, node_id = node_id, presence)
# Model
library(lme4)
library("stats4")
library("bbmle")
View(change_top_25_PP)
pers_2<-glmer (presence ~ management + ( 1| node_id), family = binomial(link="logit"), data = change_top_25_PP)
pers_2<-glmer (presence ~ management + ( 1| node_id), family = binomial(link="logit"), data = change_top_25_PP,
REML = FALSE)
pers_2<-glmer (presence ~ management + ( 1| node_id), family = quasibinomial(link = "logit"), data = change_top_25_PP)
pers_2<-glmer (presence ~ management + ( 1| node_id), family = binomial(link="logit"), data = change_top_25_PP,
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
summary(pers_2)
#Homogeneity
EM<-resid(pers_2, type= "deviance")
FM<-fitted(pers_2)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3)
#independence
E1_lme<-resid(pers_2, type= "deviance")
boxplot(E1_lme~change_top_25_PP$management, main="Tratamiento")
