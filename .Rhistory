left_join(ES_list, by = 'services') %>% #assign node_id to each services (previously defined) %>%
select(-services,-type) %>% rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x") %>%
select (node_from,node_to,management)
### Merge both edge lists
edge_list<-rbind(edge.list.sp_sp,ES.species_edge)
View(edge_list)
edge_list_E<-edge_list %>% filter(management == "E")
# create graph object using edges.ES
net.ES <- graph.data.frame(edge_list_E,
directed = T,
vertices = nodes)
plot(net.ES) # check to make sure arrows are flipped
edge_list_E<-edge_list %>% filter(management == "E") %>% select(-management)
# create graph object using edges.ES
net.ES <- graph.data.frame(edge_list_E,
directed = T,
vertices = nodes)
plot(net.ES) # check to make sure arrows are flipped
View(edge_list_E)
View(ES.species_edge)
View(nodes)
#load packages
library(igraph)
library(dplyr)
setwd("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio") #set directory
### Create node list including species and E(D)S
node_species_list<-read.csv("Data/Land_use_rat_state_nodes_CP_intense.csv", sep = ",") %>%  #load list of species
ungroup() %>% select(node_id)%>% unique() %>% arrange(node_id) %>%
mutate(type = "species")
ES_list<-read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edgelist of nodes and direct ES
ungroup() %>% select(services) %>% unique() %>%
mutate(node_id = seq(max(node_species_list$node_id)+1,max(node_species_list$node_id)+7),
type = "E(D)S") #list of ES as nodes
View(ES_list)
ES_list<-read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edgelist of nodes and direct ES
ungroup() %>% select(services) %>% unique() %>%
mutate(node_id = seq(max(node_species_list$node_id)+1,max(node_species_list$node_id)+7)) %>%
rename ("type" = "services")#list of ES as nodes
View(ES_list)
nodes<-rbind(node_species_list,ES_list)
## edge list species-species from consumers to resources
species.species_edge<- read.csv("Data/Land_use_rat_edgelist_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-species
select(-weight)
#flip direction of edges from consumer to resources
species.species_edge_inverted<- tibble(values = species.species_edge$node_to,species.species_edge$node_from,
species.species_edge$management)
colnames(species.species_edge_inverted) <- c("node_from", "node_to", "management")
edge.list.sp_sp<-species.species_edge_inverted #edge list sp-sp
## edge list E(D)S- species pointing from E(D)S to species so random walker walks from E(D)S
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
## edge list E(D)S- species pointing from E(D)S to species so random walker walks from E(D)S
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,type,management) %>%
left_join(ES_list, by = c ('services' = "type")) %>% #assign node_id to each services (previously defined) %>%
select(-type) %>% rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x") %>%
select (node_from,node_to,management)
View(ES_list)
## edge list E(D)S- species pointing from E(D)S to species so random walker walks from E(D)S
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,type,management) %>%
left_join(ES_list, by = c ('type' = "services")) %>% #assign node_id to each services (previously defined) %>%
select(-type) %>% rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x") %>%
select (node_from,node_to,management)
## edge list E(D)S- species pointing from E(D)S to species so random walker walks from E(D)S
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,type,management) %>%
left_join(ES_list, by = "type") %>% #assign node_id to each services (previously defined) %>%
select(-type) %>% rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x") %>%
select (node_from,node_to,management)
View(ES.species_edge)
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,type,management) %>%
left_join(ES_list, by = "type")
View(ES.species_edge)
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,type,management)
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",")
## edge list E(D)S- species pointing from E(D)S to species so random walker walks from E(D)S
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
## edge list E(D)S- species pointing from E(D)S to species so random walker walks from E(D)S
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,services,management) %>%
left_join(ES_list, by = c ("type" = "services")) %>% #assign node_id to each services (previously defined) %>%
select(-type) %>% rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x") %>%
select (node_from,node_to,management)
## edge list E(D)S- species pointing from E(D)S to species so random walker walks from E(D)S
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,services,management) %>%
left_join(ES_list, by = c ("services" = "type")) %>% #assign node_id to each services (previously defined) %>%
select(-type) %>% rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x") %>%
select (node_from,node_to,management)
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,services,management)
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,services,management) %>%
left_join(ES_list, by = c ("type" = "services"))
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,services,management) %>%
left_join(ES_list, by = c ("services" = "type"))
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,services,management) %>%
left_join(ES_list, by = c ("services" = "type")) %>% #assign node_id to each services (previously defined) %>%
select(-type) %>% rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x") %>%
select (node_from,node_to,management)
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,services,management) %>%
left_join(ES_list, by = c ("services" = "type")) %>% #assign node_id to each services (previously defined) %>%
rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x")
ES.species_edge<- read.csv("Data/Land_use_dir_weighted_CP_intense.csv", sep = ",") %>% #load edge list species-E(D)S
select(node_id,services,management) %>%
left_join(ES_list, by = c ("services" = "type")) %>% #assign node_id to each services (previously defined) %>%
rename ("node_from" = "node_id.y", #flip directions of edges from ES to species
"node_to" = "node_id.x") %>%
select (node_from,node_to,management)
### Merge both edge lists
edge_list<-rbind(edge.list.sp_sp,ES.species_edge)
edge_list_E<-edge_list %>% filter(management == "E") %>% select(-management)
# create graph object using edges.ES
net.ES <- graph.data.frame(edge_list_E,
directed = T,
vertices = nodes)
plot(net.ES) # check to make sure arrows are flipped
View(nodes)
?page_rank
nrow(nodes)
nrow(nodes[nodes$type!="species",])
0,0,1,0,0,0,0))$vector
crop.pro <- data.frame(SpeciesID=nodes$nodes_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])
prueba<- rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])
prueba<- rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",]))
crop.pro <- data.frame(SpeciesID=nodes$nodes_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
crop.pro <- data.frame(SpeciesID=nodes$nodes_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T)
crop.pro
crop.pro <- data.frame(SpeciesID=nodes$nodes_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T))
crop.pro <- data.frame(SpeciesID=nodes$nodes_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
View(net.ES)
net.ES
crop.pro <- data.frame(SpeciesID=nodes$nodes_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
## Crop production
crop.pro <- data.frame(SpeciesID=nodes$nodes_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
crop.pro <- data.frame(SpeciesID=nodes$nodes_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))
prueba<- rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",]))
prueba<- rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),1,0,0,0,0,0,0)
prueba<- rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",]),1,0,0,0,0,0,0)
prueba<- c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",]),1,0,0,0,0,0,0))
prueba<- c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),1,0,0,0,0,0,0)
prueba
view(prueba)
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0)$vector)
peciesID=nodes$nodes_id
SpeciesID=nodes$nodes_id
crop.pro <- data.frame(SpeciesID=n odes$node_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
crop.pro <- data.frame(SpeciesID=nodes$node_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
View(crop.pro)
View(ES_list)
crop.pro.SPP <- crop.pro[!(crop.pro$NodesID>521),] # remove nodes representing E(D)S
View(crop.pro.SPP)
crop.pro <- data.frame(NodesID=nodes$node_id, prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = c(rep(0,times=nrow(nodes)-nrow(nodes[nodes$type!="species",])),
1,0,0,0,0,0,0))$vector)
crop.pro.SPP <- crop.pro[!(crop.pro$NodesID>521),] # remove nodes representing E(D)S
View(crop.pro.SPP)
View(edge_list_E)
View(edge_list_E)
View(crop.pro)
crop.pro.SPP <- crop.pro%>% filter(NodesID>521) # remove nodes representing E(D)S
View(crop.pro.SPP)
crop.pro.SPP <- crop.pro%>% filter(!(NodesID>521)) # remove nodes representing E(D)S
View(crop.pro.SPP)
crop.pro.direct <- edge_list_E %>%
mutate(node_to = if_else(node_from == "522",NA, node_to))
View(crop.pro.direct)
crop.pro.direct <- edge_list_E %>%
mutate(node_to = if_else(node_from == "522",NA_character_, node_to))
crop.pro.direct <- edge_list_E %>%
mutate(node_to = if_else(node_from == "522",NA_character_, node_from))
crop.pro.direct <- edge_list_E %>%
mutate(node_to = if_else(node_from == "522",NA, node_from))
View(crop.pro.direct)
crop.pro.direct <- edge_list_E %>%
mutate(node_to = if_else(node_from == "522",NA, node_to))
View(crop.pro.direct)
crop.pro.direct <- edge_list_E %>%
mutate(node_to = if_else(node_from == 522,NA, node_to))
View(crop.pro.direct)
crop.pro.direct <- edge_list_E %>%
mutate(node_to = if_else(node_from == 522,NA_integer_, node_to))
View(crop.pro.direct)
prueba<- crop.pro.direct %>% filter(node_from==522)
View(prueba)
crop.pro.direct <- edge_list_E %>%
mutate(node_to = if_else(node_from == 522,NA_integer_, node_to)) %>%  # assign NA to species providing directly the particular ES
filter(!(is.na(node_to))) #and remove those species
prueba<-crop.pro.direct %>% filter(is.na(node_to))
View(crop.pro.SPP)
View(crop.pro)
crop.pro.direct <- crop.pro %>%
mutate(NodesID = if_else(edge_list_E$node_from == 522,NA_integer_, node_to))
crop.pro.direct <- crop.pro %>%
mutate(NodesID = if_else(edge_list_E$node_from == 522,NA_integer_, edge_list_E$node_to))
carbon.seq.direct <- data.frame(NodesID = ifelse(edge_list_E$node_fro=="552",
edge_list_E$node_to,NA)) #
carbon.seq.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from=="552",
edge_list_E$node_to,NA)) #
crop.pro.direct <- crop.pro %>%
mutate(NodesID = if_else(edge_list_E$node_from == 522,NA_integer_, edge_list_E$node_to)) %>%  # assign NA to species providing directly the particular ES
filter(!(is.na(node_to))) #and remove those species
View(carbon.seq.direct)
View(carbon.seq.direct)
carbon.seq.direct <- c(na.omit(carbon.seq.direct)) # remove NAs
View(carbon.seq.direct)
crop.pro.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from=="552",
edge_list_E$node_to,NA)) #
View(crop.pro.direct)
crop.pro.seq.direct <- c(na.omit(crop.pro.direct)) # remove NAs
View(crop.pro.seq.direct)
crop.pro.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from=="552",
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
crop.pro.direct <- c(na.omit(crop.pro.direct)) # and remove those species
crop.pro.ind.support <- crop.pro.SPP[!(crop.pro.SPP$SpeciesID %in% crop.pro.SPP$SpeciesID),] # keep only ind supporting spp!
View(crop.pro.ind.support)
crop.pro.ind.support <- crop.pro.SPP[!(crop.pro.SPP$NodesID %in% crop.pro.SPP$NodesID),] # keep only ind supporting spp!
crop.pro.ind.support <- crop.pro.SPP[!(crop.pro.SPP$NodesID %in% crop.pro.direct$NodesID),] # keep only ind supporting spp!
View(crop.pro.ind.support)
crop.pro.ind.sup<- crop.pro.ind.support %>% arrange(prob)
View(crop.pro.ind.sup)
crop.pro.ind.sup<- crop.pro.ind.support %>% arrange(desc(prob))
View(crop.pro.ind.support)
View(nodes)
pers.page <-rep(0, nrow(nodes))
i=522
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1)
pers.page
i=552
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1)
pers.page
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page))
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page$vector))
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page))
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page))
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
View(page.rank)
filter(!(NodesID>551))
page.rank.spp<- page.rank %>% filter(!(NodesID>552))
View(page.rank.spp)
page.rank.spp<- page.rank %>% filter(!(NodesID>551))
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from== i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
View(page.rank.direct)
prueba<- page.rank.direct %>% filter(is.na(node_to))
prueba<- page.rank.direct %>% filter(is.na(NodesID))
View(prueba)
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
View(page.rank.spp)
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from== i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
edge_list_E$node_from== i
PRUEBA<-edge_list_E %>% filter (node_from == i)
View(PRUEBA)
ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA
NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))
View(page.rank.direct)
PRUEBA<-edge_list_E %>% filter !(is.na(NodesID))
PRUEBA<-edge_list_E %>% filter (!is.na(NodesID))
prueba<- page.rank.direct %>% filter(!is.na(NodesID))
View(prueba)
#HASTA ACA VA BIEN!
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
View(page.rank)
View(nodes)
#HASTA ACA VA BIEN!
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
View(page.rank.direct)
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
page.rank.ind.support <- page.rank.spp[!(page.rank.spp$NodesID %in% page.rank.direct$NodesID),] # keep only ind supporting spp!
View(page.rank.ind.support)
View(page.rank.ind.support)
View(nodes)
j = nodes[i,2] #identity of E(D)S
# Storage the results
serb<- rep(j,nrow(page.rank.ind.support))
view(serb)
View(page.rank.ind.support)
View(nodes)
sp_rank = c()
for (i in 552:553){ #for each E(D)S
j = nodes[i,2] #identity of E(D)S
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
#ACA ES DONDE TENGO QUE FILTRAR POR MANAGEMENT
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
page.rank.ind.support <- page.rank.spp[!(page.rank.spp$NodesID %in% page.rank.direct$NodesID),] # keep only ind supporting spp!
# Storage the results)
sp_rank<- c(sp_rank, page.rank.ind.support)
services <- c(services, rep(j,nrow(page.rank.ind.support))) # services
#management  CREATE WHEN I DO NESTED
}
management = c()
services = c()
sp_rank = c()
for (i in 552:553){ #for each E(D)S
j = nodes[i,2] #identity of E(D)S
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
#ACA ES DONDE TENGO QUE FILTRAR POR MANAGEMENT
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
page.rank.ind.support <- page.rank.spp[!(page.rank.spp$NodesID %in% page.rank.direct$NodesID),] # keep only ind supporting spp!
# Storage the results)
sp_rank<- c(sp_rank, page.rank.ind.support)
services <- c(services, rep(j,nrow(page.rank.ind.support))) # services
#management  CREATE WHEN I DO NESTED
}
prueb<-data.frame(sp_rank,services)
management = c()
services = c()
sp_rank = c()
for (i in 552:553){ #for each E(D)S
j = nodes[i,2] #identity of E(D)S
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
#ACA ES DONDE TENGO QUE FILTRAR POR MANAGEMENT
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
page.rank.ind.support <- page.rank.spp[!(page.rank.spp$NodesID %in% page.rank.direct$NodesID),] # keep only ind supporting spp!
# Storage the results)
sp_rank<- c(sp_rank, page.rank.ind.support)
services <- c(services, rep(j,nrow(page.rank.ind.support))) # services
#management  CREATE WHEN I DO NESTED
}
View(page.rank.ind.support)
sp_rank<- c(sp_rank, page.rank.ind.support)
View(sp_rank)
View(page.rank.ind.support)
sp_rank<- c(sp_rank, unlist(page.rank.ind.support))
management = c()
services = c()
sp_rank = c()
for (i in 552:553){ #for each E(D)S
j = nodes[i,2] #identity of E(D)S
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
#ACA ES DONDE TENGO QUE FILTRAR POR MANAGEMENT
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
page.rank.ind.support <- page.rank.spp[!(page.rank.spp$NodesID %in% page.rank.direct$NodesID),] # keep only ind supporting spp!
# Storage the results)
sp_rank<- c(sp_rank, unlist(page.rank.ind.support))
services <- c(services, rep(j,nrow(page.rank.ind.support))) # services
#management  CREATE WHEN I DO NESTED
}
prueb<-data.frame(sp_rank,services)
View(prueb)
View(page.rank.ind.support)
for (i in 552:553){ #for each E(D)S
j = nodes[i,2] #identity of E(D)S
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
#ACA ES DONDE TENGO QUE FILTRAR POR MANAGEMENT
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
page.rank.ind.support <- page.rank.spp[!(page.rank.spp$NodesID %in% page.rank.direct$NodesID),] # keep only ind supporting spp!
# Storage the results)
sp_rank<- rbind(sp_rank, page.rank.ind.support)
services <- c(services, rep(j,nrow(page.rank.ind.support))) # services
#management  CREATE WHEN I DO NESTED
}
management = c()
services = c()
sp_rank = NULL
for (i in 552:553){ #for each E(D)S
j = nodes[i,2] #identity of E(D)S
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
#ACA ES DONDE TENGO QUE FILTRAR POR MANAGEMENT
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
page.rank.ind.support <- page.rank.spp[!(page.rank.spp$NodesID %in% page.rank.direct$NodesID),] # keep only ind supporting spp!
# Storage the results)
sp_rank<- rbind(sp_rank, page.rank.ind.support)
services <- c(services, rep(j,nrow(page.rank.ind.support))) # services
#management  CREATE WHEN I DO NESTED
}
prueb<-data.frame(sp_rank,services)
View(prueb)
management = c()
services = c()
sp_rank = NULL
for (i in 552:558){ #for each E(D)S
j = nodes[i,2] #identity of E(D)S
#Pagerank function
pers.page <- rep(0, nrow(nodes)) %>% replace(i,1) #create personalized pagerank
page.rank<-data.frame (NodesID=nodes$node_id,
prob=page_rank(graph=net.ES, damping = 0.85, directed = T,
personalized = pers.page)$vector)
page.rank.spp<- page.rank %>% filter(!(NodesID>551)) # remove nodes representing E(D)S
#ACA ES DONDE TENGO QUE FILTRAR POR MANAGEMENT
page.rank.direct <- data.frame(NodesID = ifelse(edge_list_E$node_from == i,
edge_list_E$node_to,NA))  # assign NA to species providing directly the particular ES
page.rank.direct <- c(na.omit(page.rank.direct)) # and remove those species
page.rank.ind.support <- page.rank.spp[!(page.rank.spp$NodesID %in% page.rank.direct$NodesID),] # keep only ind supporting spp!
# Storage the results)
sp_rank<- rbind(sp_rank, page.rank.ind.support)
services <- c(services, rep(j,nrow(page.rank.ind.support))) # services
#management  CREATE WHEN I DO NESTED
}
page_rank_sp<-data.frame(sp_rank,services)
View(page_rank_sp)
View(edge_list_E)
edge_list
