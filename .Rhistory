install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("manlius/muxViz")
remove.packages("muxViz")
devtools::install_github("manlius/muxViz")
library(htmltools)
library(htmltools)
install.packages("htmltools")
detach("package:htmltools", unload = TRUE)
install.packages("htmltools")
devtools::install_github("manlius/muxViz")
install.packages("htmltools")
devtools::install_github("manlius/muxViz")
library(emln)#multilayer package
#load packages
library(igraph)
library(dplyr)
library(tidyverse)
library(emln)#multilayer package
library(readr)
library(ggplot2)
library(cowplot)
setwd("/Users/agustinvitali/Desktop/Work/Papers/Norwood_Farm/GitHub/Norwood_farm/Exploratory")
setwd("/Users/agustinvitali/Desktop/Work/Papers/Norwood_Farm/GitHub/Norwood_farm/Exploratory/Scenario_ES")
#setwd("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio")
source("/Users/agustinvitali/Desktop/Work/Papers/Norwood_Farm/GitHub/Norwood_farm/Exploratory/Scenario_ES/functions.R")
######### --- Call and arrange dataframes
Norwood_farm<-readRDS("Data/Norwood_farm.RData") #read multilayer object
setwd("/Users/agustinvitali/Desktop/Work/Papers/Norwood_Farm/GitHub/Norwood_farm")
#setwd("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio")
source("/Users/agustinvitali/Desktop/Work/Papers/Norwood_Farm/GitHub/Norwood_farm/Exploratory/Scenario_ES/functions.R")
######### --- Call and arrange dataframes
Norwood_farm<-readRDS("Data/Norwood_farm.RData") #read multilayer object
#upload and prepare dataframe
ite = 1:500
direct_ES<- read.csv("Data/direct_ES_sim_CP.csv", sep =",") %>% filter(iteration == "Emp"|iteration%in%ite)
direct_ES$management <- factor(direct_ES$management, levels = c("E", "SE", "M", "SI","I","IM")) #change order of factors
# Observed (empirical)
direct_obs <-direct_ES %>% filter(iteration == "Emp") %>% group_by(management,services) %>%
mutate(tot = n()) %>% ungroup() %>%
group_by(services) %>%
mutate(prop = tot/max(tot)) %>%  #prop of E(D)S rtained across habitat management
dplyr::select(management,services,tot,prop) %>%
unique() %>% rename("Prop_mean" = "prop") %>%  filter(management != "E")
# shuffled
direct_shuff<- direct_ES %>% filter(!(iteration == "Emp" & management !="E"))%>% group_by(management,iteration,services) %>%
mutate(tot = n(),
tot_emp = case_when( #Values of denominator
services == "Crop production"~ 6,
services == "Pollination" ~ 117,
services == "Crop damage"~ 15,
services == "Pest control"~ 28,
services == "Seed dispersal" ~ 5,
services == "Butterfly watching"~ 16,
services == "Bird watching"~ 7 )) %>% ungroup() %>%
group_by(services) %>%
mutate(prop = tot/tot_emp) %>%  #prop of E(D)S rtained across habitat management per iteration and habitat management
dplyr::select(management,iteration,services,prop) %>%
unique() %>% rename("Prop_mean" = "prop") %>% filter(management !="E")
# calculate Z-score
dir_ES_z_score <-
inner_join(direct_obs,
direct_shuff %>% select(-iteration) %>%
group_by(management,services) %>%
summarise(dir_shuff_mean=mean(Prop_mean), dir_shuff_sd=sd(Prop_mean), n=n())) %>%
drop_na() %>%
mutate(z=(Prop_mean-dir_shuff_mean)/dir_shuff_sd)
dir_ES_z_score %<>%
mutate(signif=case_when(z>1.96 ~ 'above', # Obs is more than the shuffled
z< -1.96 ~ 'below', # Obs is lower than the shuffled
z<=1.96 | z>=-1.96 | z == "NaN" ~ 'not signif'))
install.packages("magrittr")
# calculate Z-score
library(magrittr)
dir_ES_z_score <-
inner_join(direct_obs,
direct_shuff %>% select(-iteration) %>%
group_by(management,services) %>%
summarise(dir_shuff_mean=mean(Prop_mean), dir_shuff_sd=sd(Prop_mean), n=n())) %>%
drop_na() %>%
mutate(z=(Prop_mean-dir_shuff_mean)/dir_shuff_sd)
dir_ES_z_score %<>%
tidyverse::mutate(signif=case_when(z>1.96 ~ 'above', # Obs is more than the shuffled
z< -1.96 ~ 'below', # Obs is lower than the shuffled
z<=1.96 | z>=-1.96 | z == "NaN" ~ 'not signif'))
dir_ES_z_score %<>%
dplyr::mutate(signif=case_when(z>1.96 ~ 'above', # Obs is more than the shuffled
z< -1.96 ~ 'below', # Obs is lower than the shuffled
z<=1.96 | z>=-1.96 | z == "NaN" ~ 'not signif'))
library(tidyverse)
#upload and prepare dataframe
ite = 1:500
direct_ES<- read.csv("Data/direct_ES_sim_CP.csv", sep =",") %>% filter(iteration == "Emp"|iteration%in%ite)
direct_ES$management <- factor(direct_ES$management, levels = c("E", "SE", "M", "SI","I","IM")) #change order of factors
# Observed (empirical)
direct_obs <-direct_ES %>% filter(iteration == "Emp") %>% group_by(management,services) %>%
mutate(tot = n()) %>% ungroup() %>%
group_by(services) %>%
mutate(prop = tot/max(tot)) %>%  #prop of E(D)S rtained across habitat management
dplyr::select(management,services,tot,prop) %>%
unique() %>% rename("Prop_mean" = "prop") %>%  filter(management != "E")
# shuffled
direct_shuff<- direct_ES %>% filter(!(iteration == "Emp" & management !="E"))%>% group_by(management,iteration,services) %>%
mutate(tot = n(),
tot_emp = case_when( #Values of denominator
services == "Crop production"~ 6,
services == "Pollination" ~ 117,
services == "Crop damage"~ 15,
services == "Pest control"~ 28,
services == "Seed dispersal" ~ 5,
services == "Butterfly watching"~ 16,
services == "Bird watching"~ 7 )) %>% ungroup() %>%
group_by(services) %>%
mutate(prop = tot/tot_emp) %>%  #prop of E(D)S rtained across habitat management per iteration and habitat management
dplyr::select(management,iteration,services,prop) %>%
unique() %>% rename("Prop_mean" = "prop") %>% filter(management !="E")
# calculate Z-score
dir_ES_z_score <-
inner_join(direct_obs,
direct_shuff %>% select(-iteration) %>%
group_by(management,services) %>%
summarise(dir_shuff_mean=mean(Prop_mean), dir_shuff_sd=sd(Prop_mean), n=n())) %>%
drop_na() %>%
mutate(z=(Prop_mean-dir_shuff_mean)/dir_shuff_sd)
dir_ES_z_score %<>%
dplyr::mutate(signif=case_when(z>1.96 ~ 'above', # Obs is more than the shuffled
z< -1.96 ~ 'below', # Obs is lower than the shuffled
z<=1.96 | z>=-1.96 | z == "NaN" ~ 'not signif'))
# Prepare dataframe
z_score_dir<- dir_ES_z_score %>% select(management,services,z,signif)
#Add row showing the extensice and bird watching and seed dispersal for IM (all birds went extinct so there were no z scores)
sd_bw<-data.frame(management = c("E","E","E","E","E","E","E"),
services = c("Bird watching", "Butterfly watching",
"Crop damage", "Crop production","Pest control",
"Pollination", "Seed dispersal"),
z = c(NaN,NaN,NaN,NaN,NaN,NaN,NaN),
signif = c("Benchmark","Benchmark","Benchmark","Benchmark",
"Benchmark","Benchmark","Benchmark"))
View(dir_ES_z_score)
View(z_score_dir)
#Summary averages (across management scenario)
averages_prop <- dir_ES_z_score %>%
mutate(times_wmp = (dir_shuff_mean*100)/Prop_mean) #calculate number of times higher/lower the empirical respect the simulated (already averaged across iterations)
View(averages_prop)
#Summary averages (across management scenario)
averages_prop <- dir_ES_z_score %>%
mutate(times_wmp = dir_shuff_mean/Prop_mean) #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
#Summary averages (across management scenario)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
#Plot
library(ggtext)
#Summary averages (across management scenario)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean)# %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
group_by(services) %>%
summarise(average_prop_shuff = dir_shuff_mean,
sd_prop_shuff = dir_shuff_sd
)
View(averages_prop)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
ungroup() %>% group_by(services) %>%
summarise(average_prop_shuff = dir_shuff_mean,
sd_prop_shuff = dir_shuff_sd
)
#Summary averages (across management scenario)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
ungroup() %>% group_by(services) %>%
summarize(average_prop_shuff = dir_shuff_mean,
sd_prop_shuff = dir_shuff_sd
)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
ungroup() %>% group_by(services) %>%
summarise(average_prop_shuff = mean(dir_shuff_mean),
sd_prop_shuff = mean(dir_shuff_sd)
)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean)
#Summary averages (across management scenario)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
ungroup() %>% group_by(services) %>%
summarise(average_prop_shuff = mean(dir_shuff_mean),
sd_prop_shuff = mean(dir_shuff_sd),
ave_times_emp = mean(times_emp)
)
View(averages_prop)
#Summary averages (across management scenario)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
ungroup() %>% group_by(services) %>%
summarise(average_prop_emp = mean(Prop_mean),
average_prop_shuff = mean(dir_shuff_mean),#average of prop in simulated across management scenario
sd_prop_shuff = mean(dir_shuff_sd),#sd of prop in simulated across management scenario
ave_times_emp = mean(times_emp) #average times lower in the empirical compared null across management scenario
)
#Summary averages (across management scenario)
averages_prop <- dir_ES_z_score %>%
mutate(times_emp = dir_shuff_mean/Prop_mean) %>%  #calculate number of times lower the empirical respect the simulated (already averaged across iterations)
ungroup() %>% group_by(services) %>%
summarise(average_prop_emp = mean(Prop_mean),
sd_prop_emp = sd(Prop_mean), n=n(),
average_prop_shuff = mean(dir_shuff_mean),#average of prop in simulated across management scenario
sd_prop_shuff = mean(dir_shuff_sd),#sd of prop in simulated across management scenario
ave_times_emp = mean(times_emp) #average times lower in the empirical compared null across management scenario
)
