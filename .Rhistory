## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_rem<-rbind(list_species_rem, degree_sp)
}
}
SE_sim<-read.csv("Data/SE_sim_state_node_CP.csv", sep =,) %>%
mutate(management = "SE") %>%  select(management, iteration,node_id,taxon,abun)
View(SE_sim)
View(IM_sim)
I_sim_state_node<-read.csv("Data/I_sim_state_node_CP.csv", sep =,)
View(I_sim_state_node)
# Create state node
I_sim_state_node<-read.csv("Data/I_sim_state_node_CP.csv", sep =,) %>%
select(management, iteration,node_id,taxon,abun)
I_sim_state_node<-read.csv("Data/I_sim_state_node_CP.csv", sep =,) %>%
select(iteration,node_id,taxon,abun)
I_sim_state_node<-read.csv("Data/I_sim_state_node_CP.csv", sep =,)
view(IM_sim)
IM_sim
# Function to get unique nodes for each iteration
get_unique_nodes <- function(df) {
unique_nodes <- unique(c(df$node_from, df$node_to))
data.frame(node_id = unique_nodes, iteration = unique(df$iteration))
}
# Apply the function to each group
unique_nodes_df <- int_edgelist_aggr %>%
group_by(management, iteration) %>%
group_modify(~ get_unique_nodes(.x))
# Apply the function to each group
unique_nodes_df <- IM_sim %>%
group_by(management, iteration) %>%
group_modify(~ get_unique_nodes(.x))
# Function to get unique nodes for each iteration
get_unique_nodes <- function(df) {
unique_nodes <- unique(c(df$node_from, df$node_to))
data.frame(node_id = unique_nodes, iteration = unique(df$iteration))
}
unique_nodes_df <- IM_sim %>%
group_by(management, iteration) %>%
group_modify(~ get_unique_nodes(.x))
sps_removed = list_speces_rem #list of species removed
sps_removed = list_speces_rem #list of species removed
#Objects to storage
edge_list_shuff <- data.frame()
list_species_rem<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_rem<-rbind(list_species_rem, degree_sp)
}
}
IM_sim = edge_list_shuff #edge list
sps_removed = list_speces_rem #list of species removed
sps_removed = list_species_rem #list of species removed
View(sps_removed)
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_species)
list_species_removed<-rbind(list_species_rem, degree_sp)
}
}
sps_survived = list_species_survived #remaining species
View(sps_survived)
View(sps_removed)
View(sps_survived)
i=1
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
i=1
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_species
remain_sps<- cbind(iteration = i, sps_survived = remain_species)
View(remain_sps)
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- cbind(iteration = i, sps_survived = remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_species)
list_species_removed<-rbind(list_species_rem, degree_sp)
}
}
View(list_species_survived)
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- cbind(iteration = i, sps_survived = remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
list_species_removed<-rbind(list_species_rem, degree_sp)
}
}
IM_sim = edge_list_shuff #edge list
sps_removed = list_species_removed #list of species removed
sps_survived = list_species_survived #remaining species
View(sps_survived)
View(remain_sps)
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- cbind(iteration = i, remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
list_species_removed<-rbind(list_species_rem, degree_sp)
}
}
IM_sim = edge_list_shuff #edge list
sps_removed = list_species_removed #list of species removed
sps_survived = list_species_survived #remaining species
View(sps_survived)
View(remain_sps)
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- cbind(iteration = i, remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
list_species_removed<-rbind(list_species_rem, degree_sp)
}
}
View(list_species_survived)
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- cbind(iteration = i, remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
list_species_removed<-rbind(list_species_removed, degree_sp)
}
}
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- cbind(iteration = i, remain_sp = remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
list_species_removed<-rbind(list_species_removed, degree_sp)
}
}
remain_sps<- cbind(iteration = i, remain_species)
View(remain_sps)
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
D
D
### Create edge list
I_sim_CP<-read.csv("Data/I_sim_CP.csv", sep =,) %>%
mutate(management = "IM")
weeds = 1:93 #weeds nodes 1:93
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- cbind(iteration = i, remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
list_species_removed<-rbind(list_species_removed, degree_sp)
}
}
View(list_species_survived)
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- data.frame(iteration = i, remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
list_species_removed<-rbind(list_species_removed, degree_sp)
}
}
#Objects to storage
edge_list_shuff <- data.frame()
list_species_removed<- data.frame()
list_species_survived<- data.frame()
for (i in 1:3){
iteration_net <- I_sim_CP %>% filter(iteration==i)
# Calculate edge list after eliminating species
edge_list_remov<- iteration_net %>%
filter(!(node_from%in%weeds), !(node_to%in%weeds))   #eliminate weeds and species that only interact with them
# Store new edge list
edge_list_shuff <- rbind(edge_list_shuff, edge_list_remov)
## Create information of the removed species
# Identify species in the network
unique_species <- iteration_net %>%
select(node_from, node_to) %>%
unlist() %>%
unique()
# Identify species that remains in the network after removing weeds
remain_species<- edge_list_remov  %>%
distinct(node_from, node_to) %>%
unlist() %>%
unique()
remain_sps<- data.frame(iteration = i, remain_species = remain_species)
# Identify species were removed from the network
sp_removed<- setdiff(unique_species, remain_species)
# Estimate the degree
for (j in sp_removed){
sp_removed = j
degree<- iteration_net %>%ungroup() %>%
filter(node_from== j| node_to ==j) %>% distinct(node_from,node_to) %>%  summarise(degree = n())
degree_sp<-cbind(species_rem = j,degree, iteration =i, habitat_from = "-",management = "IM")
#Store the information
list_species_survived<-rbind(list_species_survived, remain_sps)
list_species_removed<-rbind(list_species_removed, degree_sp)
}
}
