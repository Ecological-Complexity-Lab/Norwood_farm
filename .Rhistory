view(e)
# Between centrality (da un valor por especie pero yo necesito que este especifiado)
c<-closeness(prueba_E)
?closeness
?graph.data.frame
#load packages
library(igraph)
library(dplyr)
library(tidyverse)
setwd("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio") #set directory
# List of noes with attributes
Norwood_farm<-readRDS("Data/Norwood_farm.RData") #read multilayer object
nodes<- Norwood_farm$nodes %>% #list of nodes with attributes
gather(services,value,4:10) %>% select(-ES,-DES)
# Edge list of each management scenario
edge_list<- read.csv("Data/Land_use_rat_edgelist_weighted_CP_intense.csv", sep = ",") %>%
select(-weight)
network.ES<-list()
for (i in unique(edge_list$management)){# for each treatment
#Filter data
edge_list_management<-edge_list %>% filter(management== i) #filter edge list according to the management
#Create igraph object
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL,
isolat)
# Storage the results
list_name <- paste0(i, i)
network.ES[[i]] <- net.ES
}
#Create igraph object
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL,
isolated =F)
#Create igraph object
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL,
remove.isolates=T)
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL,
isolates= FALSE)
network.ES<-list()
for (i in unique(edge_list$management)){# for each treatment
#Filter data
edge_list_management<-edge_list %>% filter(management== i) #filter edge list according to the management
#Create igraph object
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL)
# Storage the results
list_name <- paste0(i, i)
network.ES[[i]] <- net.ES
}
prueba_E <-  network.ES[["E"]]
is.igraph(prueba_E)
g<-distances(prueba_E)
View(g)
# Between centrality (da un valor por especie pero yo necesito que este especifiado)
c<-closeness(prueba_E, disc)
# Between centrality (da un valor por especie pero yo necesito que este especifiado)
c<-closeness(prueba_E)
b<-betweenness(prueba_E)
prueba_E <-  network.ES[["E"]]
g<-distances(prueba_E)
g_colnames <- colnames(g)
# Filter dataframe based on matching column names
matching_colnames <- intersect(names(g), db_colnames)
# Filter dataframe based on matching column names
matching_colnames <- intersect(names(g),g_colnames)
View(nodes)
View(nodes)
hist(g)
prueba_E <-  network.ES[["E"]]
d<-distances(prueba_E)
hist(d)
short_E <- which(d != 0, arr.ind = TRUE)
View(short_E)
View(d)
## Tranform adjacency matrix into edge list
adjacency_matrix_to_edge_list <- function(adj_matrix) {
edge_list <- which(adj_matrix != 0, arr.ind = TRUE)
weights <- adj_matrix[edge_list]
edge_list <- cbind(edge_list, weights)
colnames(edge_list) <- c("Source", "Target", "Weight")
return(edge_list)
}
## Tranform adjacency matrix into edge list
adjacency_matrix_to_edge_list <- function(adj_matrix) {
edge_list <- which(adj_matrix != 0, arr.ind = TRUE)
weights <- adj_matrix[edge_list]
edge_list <- cbind(edge_list, weights)
colnames(edge_list) <- c("Source", "Target", "Weight")
return(edge_list)
}
edge_list <- adjacency_matrix_to_edge_list(d)
View(edge_list)
edge_list <- adjacency_matrix_to_edge_list(d) %>% rename("node_from" = "source", "node_to" = "node_to", "short_path" = "Weight"
)
edge_list <- adjacency_matrix_to_edge_list(d) %>% rename("node_from" = "source", "node_to" = "node_to", "short_path" = "Weight")
## Tranform adjacency matrix into edge list
adjacency_matrix_to_edge_list <- function(adj_matrix) {
edge_list <- which(adj_matrix != 0, arr.ind = TRUE)
weights <- adj_matrix[edge_list]
edge_list <- cbind(edge_list, weights)
colnames(edge_list) <- c("Source", "Target", "Weight")
return(edge_list)
}
edge_list <- adjacency_matrix_to_edge_list(d) %>% rename("node_from" = "source", "node_to" = "node_to", "short_path" = "Weight")
edge_list <- as.dataframe(adjacency_matrix_to_edge_list(d)) %>% rename("node_from" = "source", "node_to" = "node_to", "short_path" = "Weight")
edge_list <- as.data.frame(adjacency_matrix_to_edge_list(d)) %>% rename("node_from" = "source", "node_to" = "node_to", "short_path" = "Weight")
edge_list <- as.data.frame(adjacency_matrix_to_edge_list(d)) %>% rename("node_from" = "Source", "node_to" = "Target", "short_path" = "Weight")
short <- as.data.frame(adjacency_matrix_to_edge_list(d)) %>%
rename("node_from" = "Source", "node_to" = "Target", "short_path" = "Weight")
View(short)
row.names(short)<-NULL
check<- short %>% filter((node_from == 1 & node_to == 2)| (node_from == 2 & node_to == 1))
View(check)
View(nodes)
nodes<- Norwood_farm$nodes %>% #list of nodes with attributes
gather(services,value,4:10) %>% select(-ES,-DES)  %>%
filter(value>0)
View(nodes)
short_serv<- short %>% left_join(nodes, by = c("node_id" = "node_to"))
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"))
View(short_serv)
short_serv<- short %>% right_join(nodes, by = c("node_id" = "node_to"))
short <- as.data.frame(adjacency_matrix_to_edge_list(d)) %>%
rename("node_from" = "Source", "node_to" = "Target", "short_path" = "Weight") %>%
filter (short_path>0)
short <- as.data.frame(adjacency_matrix_to_edge_list(d)) %>%
rename("node_from" = "Source", "node_to" = "Target", "short_path" = "Weight") %>%
filter (short_path!=Inf)
View(short)
short <- as.data.frame(adjacency_matrix_to_edge_list(d)) %>%
rename("node_from" = "Source", "node_to" = "Target", "short_path" = "Weight") %>%
filter (short_path!=Inf)
row.names(short)<-NULL
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"))
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), .keep_all = T)
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), .keep_all = TRUE)
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"))
?left_join
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), relationship = "many-to-many")
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), relationship = "many-to-many") %>%
select(-node_name,-taxon,-value)
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), relationship = "many-to-many") %>%
select(-node_name,-taxon,-value) %>%  filter(is.na(services))
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), relationship = "many-to-many") %>%
select(-node_name,-taxon,-value) %>%  filter!((is.na(services)))
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), relationship = "many-to-many") %>%
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), relationship = "many-to-many") %>%
select(-node_name,-taxon,-value) %>%  filter(!(is.na(services)))
short_serv<- short %>% left_join(nodes, by = c("node_to" = "node_id"), relationship = "many-to-many") %>%
select(-node_name,-taxon,-value) %>%  filter(!(is.na(services)))
check<-short_serv %>% filter(services == "Bird watching")
View(check)
check<-short_serv %>% filter(node_to == 495)
check<-short_serv %>% filter(node_to == 496)
check<-short_serv %>% filter(node_to == 497)
check<-short_serv %>% filter(node_to == 498)
check<-short_serv %>% filter(node_to == 499)
i = "Crop production"
edge_list_management <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
View(edge_list_management)
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
View(edge_list_service)
# Calculate average of length per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
View(species_short)
# Filtering data
i = "Pollination"
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
species_short_path<- rbind(species_short_path, species_short) #
services <- c(services, rep (i, nrow(species_short))) # services
services = c()
species_short_path = NULL
for (i in unique(short_serv$services)) {  #for each ecosystem service
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
#Store results
species_short_path<- rbind(species_short_path, species_short) #
services <- c(services, rep (i, nrow(species_short))) # services
}
species_shortpath_CP_intense<- rbind(species_short_path,services)
View(species_shortpath_CP_intense)
species_shortpath- rbind(species_short_path,services)
species_shortpath<- rbind(species_short_path,services)
View(species_shortpath)
services = c()
species_short_path = NULL
for (i in unique(short_serv$services)) {  #for each ecosystem service
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
#Store results
species_short_path<- rbind(species_short_path, species_short) #
services <- c(services, rep (i, nrow(species_short))) # services
}
species_shortpath<- rbind(species_short_path,services)
species_shortpath<- rbind(species_short_path,services)
services = c()
species_short_path = NULL
for (i in unique(short_serv$services)) {  #for each ecosystem service
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
#Store results
species_short_path<- rbind(species_short_path, species_short) #
services <- c(services, rep (i, nrow(species_short))) # services
}
services = NULL
species_short_path = NULL
for (i in unique(short_serv$services)) {  #for each ecosystem service
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
#Store results
species_short_path<- rbind(species_short_path, species_short) #
services <- rbind(services, rep (i, nrow(species_short))) # services
}
View(species_short)
services = NULL
species_short_path = NULL
i = "Pest control"
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
View(edge_list_service)
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
prueba<- rep(i,nrow(species_short))
services = NULL
species_short_path = NULL
for (i in unique(short_serv$services)) {  #for each ecosystem service
i = "Pest control"
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
#Store results
species_short_path<- rbind(species_short_path, species_short) #
services <- rbind(services, rep (i, nrow(species_short))) # services
}
species_shortpath<- cbind(species_short_path,services)
View(species_shortpath)
services = c()
species_short_path = NULL
for (i in unique(short_serv$services)) {  #for each ecosystem service
i = "Pest control"
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
#Store results
species_short_path<- rbind(species_short_path, species_short) #
services <- rbind(services, rep (i, nrow(species_short))) # services
}
species_shortpath<- cbind(species_short_path,services)
services = c()
species_short_path = NULL
for (i in unique(short_serv$services)) {  #for each ecosystem service
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
#Store results
species_short_path<- rbind(species_short_path, species_short) #
services <- rbind(services, rep (i, nrow(species_short))) # services
}
services = c()
species_short_path = NULL
for (i in unique(short_serv$services)) {  #for each ecosystem service
# Filtering data
edge_list_service <- short_serv %>% filter(services == i) #select species that interact with species providing the specific ES
# Calculate average of short path per node_from
species_short<- edge_list_service %>% group_by(node_from) %>%
summarise(short_ave = mean(short_path))
#Store results
species_short_path<- rbind(species_short_path, species_short) #
services <- c(services, rep (i, nrow(species_short))) # services
}
species_shortpath<- cbind(species_short_path,services)
check<-species_shortpath %>% filter(services == "Pollination")
hist(check$short_ave
hist(check$short_ave)
hist(check$short_ave)
check<-species_shortpath %>% filter(services == "Crop production")
hist(check$short_ave)
check<-species_shortpath %>% filter(services == "Bird watching")
hist(check$short_ave)
check<-species_shortpath %>% filter(services == "Pest control")
hist(check$short_ave)
View(net.ES)
network.ES<-list()
for (i in unique(edge_list$management)){# for each treatment
#Filter data
edge_list_management<-edge_list %>% filter(management== i) #filter edge list according to the management
#Create igraph object
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL)
# Storage the results
list_name <- paste0(i, i)
network.ES[[i]] <- net.ES
}
View(net.ES)
View(network.ES)
network.ES<-list()
dge_list$management)
edge_list$management
# List of noes with attributes
Norwood_farm<-readRDS("Data/Norwood_farm.RData") #read multilayer object
nodes<- Norwood_farm$nodes %>% #list of nodes with attributes
gather(services,value,4:10) %>% select(-ES,-DES)  %>%
filter(value>0)
# Edge list of each management scenario
edge_list<- read.csv("Data/Land_use_rat_edgelist_weighted_CP_intense.csv", sep = ",") %>%
select(-weight)
network.ES<-list()
for (i in unique(edge_list$management)){# for each treatment
#Filter data
edge_list_management<-edge_list %>% filter(management== i) #filter edge list according to the management
#Create igraph object
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL)
# Storage the results
list_name <- paste0(i, i)
network.ES[[i]] <- net.ES
}
View(network.ES)
unique(edge_list$management)
names(network.ES)
igraph_management<-network.ES[[m]]
m = "E"
igraph_management<-network.ES[[m]]
View(igraph_management)
# Filter data
m = "E"
igraph_management<-network.ES[[m]]
# Calculate distance between noes (shortest path)
dis<-distances(igraph_management)
View(dis)
# Filter data
m = "E"
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
# Convert adjacency matrix to edge list
short<-as.data.frame(adjacency_matrix_to_edge_list(d))  %>%
filter (short_path!=Inf) #eliminate isolated nodes
row.names(short)<-NULL
short<-as.data.frame(adjacency_matrix_to_edge_list(dis))  %>%
filter (short_path!=Inf)
#Function to convert adjacency matrix into edge_list
adjacency_matrix_to_edge_list <- function(adj_matrix) {
edge_list <- which(adj_matrix != 0, arr.ind = TRUE)
weights <- adj_matrix[edge_list]
short <- cbind(edge_list, weights)
colnames(edge_list) <- c("node_from", "node_to", "short_path")
return(edge_list)
}
# Filter data
m = "E"
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
short<-as.data.frame(adjacency_matrix_to_edge_list(dis))
adjacency_matrix_to_edge_list(dis)
View(dis)
#load packages
library(igraph)
library(dplyr)
library(tidyverse)
setwd("/Users/agustin/Desktop/Papers/Norwood_farm/Norwood_Tinio") #set directory
# List of noes with attributes
Norwood_farm<-readRDS("Data/Norwood_farm.RData") #read multilayer object
nodes<- Norwood_farm$nodes %>% #list of nodes with attributes
gather(services,value,4:10) %>% select(-ES,-DES)  %>%
filter(value>0)
# Edge list of each management scenario
edge_list<- read.csv("Data/Land_use_rat_edgelist_weighted_CP_intense.csv", sep = ",") %>%
select(-weight)
network.ES<-list()
for (i in unique(edge_list$management)){# for each treatment
#Filter data
edge_list_management<-edge_list %>% filter(management== i) #filter edge list according to the management
#Create igraph object
net.ES <- graph.data.frame(edge_list_management,
directed = F,
vertices = NULL)
# Storage the results
list_name <- paste0(i, i)
network.ES[[i]] <- net.ES
}
#Function to convert adjacency matrix into edge_list
adjacency_matrix_to_edge_list <- function(adj_matrix) {
edge_list <- which(adj_matrix != 0, arr.ind = TRUE)
weights <- adj_matrix[edge_list]
short <- cbind(edge_list, weights)
colnames(edge_list) <- c("node_from", "node_to", "short_path")
return(edge_list)
}
# Filter data
m = "E"
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
# Convert adjacency matrix to edge list
short<-as.data.frame(adjacency_matrix_to_edge_list(dis))  %>%
filter (short_path!=Inf) #eliminate isolated nodes
#Function to convert adjacency matrix into edge_list
adjacency_matrix_to_edge_list <- function(adj_matrix) {
edge_list <- which(adj_matrix != 0, arr.ind = TRUE)
weights <- adj_matrix[edge_list]
edge_list <- cbind(edge_list, weights)
colnames(edge_list) <- c("node_from", "node_to", "short_path")
return(edge_list)
}
# Filter data
m = "E"
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
# Convert adjacency matrix to edge list
short<-as.data.frame(adjacency_matrix_to_edge_list(dis))  %>%
filter (short_path!=Inf) #eliminate isolated nodes
row.names(short)<-NULL
View(short)
short_man<-NULL
management<-c()
# Filter data
m = "SI"
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
# Convert adjacency matrix to edge list
short<-as.data.frame(adjacency_matrix_to_edge_list(dis))  %>%
filter (short_path!=Inf) #eliminate isolated nodes
row.names(short)<-NULL
short_man<-NULL
management<-c()
for (m in names(network.ES)) { #for each management
# Filter data
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
# Convert adjacency matrix to edge list
short<-as.data.frame(adjacency_matrix_to_edge_list(dis))  %>%
filter (short_path!=Inf) #eliminate isolated nodes
row.names(short)<-NULL
#Store
short_man<- rbind(short_man, short) #
management <- c(management, rep (m, nrow(short))) # services
}
species_shortpath_raw<- cbind(short_man,management)
View(species_shortpath_raw)
CHECK<- species_shortpath_raw %>% filter(node_from == 500 & node_to == 67)
View(CHECK)
short_man<-NULL
management<-c()
for (m in names(network.ES)) { #for each management
# Filter data
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
# Convert adjacency matrix to edge list
short<-as.data.frame(adjacency_matrix_to_edge_list(dis))
row.names(short)<-NULL
#Store
short_man<- rbind(short_man, short) #
management <- c(management, rep (m, nrow(short))) # services
}
species_shortpath_raw<- cbind(short_man,management)
CHECK<- species_shortpath_raw %>% filter(node_from == 500 & node_to == 67)
short_man<-NULL
management<-c()
for (m in names(network.ES)) { #for each management
# Filter data
igraph_management<-network.ES[[m]]
# Calculate distance between nodes (shortest path)
dis<-distances(igraph_management)
# Convert adjacency matrix to edge list
short<-as.data.frame(adjacency_matrix_to_edge_list(dis))  %>%
filter (short_path!=Inf) #eliminate isolated nodes
row.names(short)<-NULL
#Store
short_man<- rbind(short_man, short) #
management <- c(management, rep (m, nrow(short))) # services
}
species_shortpath_raw<- cbind(short_man,management)
CHECK<- species_shortpath_raw %>% filter(node_from == 300 & node_to == 67)
CHECK<- species_shortpath_raw %>% filter(node_from == 200 & node_to == 67)
